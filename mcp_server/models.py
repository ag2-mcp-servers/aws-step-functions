# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:00:53+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, confloat, conint, constr


class ActivityDoesNotExist(RootModel[Any]):
    root: Any


class ActivityLimitExceeded(RootModel[Any]):
    root: Any


class ActivityWorkerLimitExceeded(RootModel[Any]):
    root: Any


class Arn(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class BilledDuration(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class BilledMemoryUsed(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class BillingDetails(BaseModel):
    billedDurationInMilliseconds: Optional[BilledDuration] = None
    billedMemoryUsedInMB: Optional[BilledMemoryUsed] = None


class CloudWatchLogsLogGroup(BaseModel):
    logGroupArn: Optional[Arn] = None


class ConnectorParameters(RootModel[SecretStr]):
    root: SecretStr


class Definition(RootModel[SecretStr]):
    root: SecretStr


class DeleteActivityInput(BaseModel):
    activityArn: Arn


class DeleteActivityOutput(BaseModel):
    pass


class DeleteStateMachineInput(BaseModel):
    stateMachineArn: Arn


class DeleteStateMachineOutput(BaseModel):
    pass


class DescribeActivityInput(BaseModel):
    activityArn: Arn


class DescribeExecutionInput(BaseModel):
    executionArn: Arn


class DescribeStateMachineForExecutionInput(BaseModel):
    executionArn: Arn


class DescribeStateMachineInput(BaseModel):
    stateMachineArn: Arn


class Enabled(RootModel[bool]):
    root: bool


class EventId(RootModel[int]):
    root: int


class ExecutionAlreadyExists(RootModel[Any]):
    root: Any


class ExecutionDoesNotExist(RootModel[Any]):
    root: Any


class ExecutionLimitExceeded(RootModel[Any]):
    root: Any


class ExecutionStatus(Enum):
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    ABORTED = 'ABORTED'


class HistoryEventType(Enum):
    ActivityFailed = 'ActivityFailed'
    ActivityScheduled = 'ActivityScheduled'
    ActivityScheduleFailed = 'ActivityScheduleFailed'
    ActivityStarted = 'ActivityStarted'
    ActivitySucceeded = 'ActivitySucceeded'
    ActivityTimedOut = 'ActivityTimedOut'
    ChoiceStateEntered = 'ChoiceStateEntered'
    ChoiceStateExited = 'ChoiceStateExited'
    ExecutionAborted = 'ExecutionAborted'
    ExecutionFailed = 'ExecutionFailed'
    ExecutionStarted = 'ExecutionStarted'
    ExecutionSucceeded = 'ExecutionSucceeded'
    ExecutionTimedOut = 'ExecutionTimedOut'
    FailStateEntered = 'FailStateEntered'
    LambdaFunctionFailed = 'LambdaFunctionFailed'
    LambdaFunctionScheduled = 'LambdaFunctionScheduled'
    LambdaFunctionScheduleFailed = 'LambdaFunctionScheduleFailed'
    LambdaFunctionStarted = 'LambdaFunctionStarted'
    LambdaFunctionStartFailed = 'LambdaFunctionStartFailed'
    LambdaFunctionSucceeded = 'LambdaFunctionSucceeded'
    LambdaFunctionTimedOut = 'LambdaFunctionTimedOut'
    MapIterationAborted = 'MapIterationAborted'
    MapIterationFailed = 'MapIterationFailed'
    MapIterationStarted = 'MapIterationStarted'
    MapIterationSucceeded = 'MapIterationSucceeded'
    MapStateAborted = 'MapStateAborted'
    MapStateEntered = 'MapStateEntered'
    MapStateExited = 'MapStateExited'
    MapStateFailed = 'MapStateFailed'
    MapStateStarted = 'MapStateStarted'
    MapStateSucceeded = 'MapStateSucceeded'
    ParallelStateAborted = 'ParallelStateAborted'
    ParallelStateEntered = 'ParallelStateEntered'
    ParallelStateExited = 'ParallelStateExited'
    ParallelStateFailed = 'ParallelStateFailed'
    ParallelStateStarted = 'ParallelStateStarted'
    ParallelStateSucceeded = 'ParallelStateSucceeded'
    PassStateEntered = 'PassStateEntered'
    PassStateExited = 'PassStateExited'
    SucceedStateEntered = 'SucceedStateEntered'
    SucceedStateExited = 'SucceedStateExited'
    TaskFailed = 'TaskFailed'
    TaskScheduled = 'TaskScheduled'
    TaskStarted = 'TaskStarted'
    TaskStartFailed = 'TaskStartFailed'
    TaskStateAborted = 'TaskStateAborted'
    TaskStateEntered = 'TaskStateEntered'
    TaskStateExited = 'TaskStateExited'
    TaskSubmitFailed = 'TaskSubmitFailed'
    TaskSubmitted = 'TaskSubmitted'
    TaskSucceeded = 'TaskSucceeded'
    TaskTimedOut = 'TaskTimedOut'
    WaitStateAborted = 'WaitStateAborted'
    WaitStateEntered = 'WaitStateEntered'
    WaitStateExited = 'WaitStateExited'
    MapRunAborted = 'MapRunAborted'
    MapRunFailed = 'MapRunFailed'
    MapRunStarted = 'MapRunStarted'
    MapRunSucceeded = 'MapRunSucceeded'


class Identity(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class IncludeExecutionData(RootModel[bool]):
    root: bool


class IncludeExecutionDataGetExecutionHistory(RootModel[bool]):
    root: bool


class InvalidArn(RootModel[Any]):
    root: Any


class InvalidDefinition(RootModel[Any]):
    root: Any


class InvalidExecutionInput(RootModel[Any]):
    root: Any


class InvalidLoggingConfiguration(RootModel[Any]):
    root: Any


class InvalidName(RootModel[Any]):
    root: Any


class InvalidOutput(RootModel[Any]):
    root: Any


class InvalidToken(RootModel[Any]):
    root: Any


class InvalidTracingConfiguration(RootModel[Any]):
    root: Any


class ListExecutionsPageToken(RootModel[constr(min_length=1, max_length=3096)]):
    root: constr(min_length=1, max_length=3096)


class ListTagsForResourceInput(BaseModel):
    resourceArn: Arn


class LogDestination(BaseModel):
    cloudWatchLogsLogGroup: Optional[CloudWatchLogsLogGroup] = None


class LogDestinationList(RootModel[List[LogDestination]]):
    root: List[LogDestination]


class LogLevel(Enum):
    ALL = 'ALL'
    ERROR = 'ERROR'
    FATAL = 'FATAL'
    OFF = 'OFF'


class LoggingConfiguration(BaseModel):
    destinations: Optional[LogDestinationList] = None
    includeExecutionData: Optional[IncludeExecutionData] = None
    level: Optional[LogLevel] = None


class LongArn(RootModel[constr(min_length=1, max_length=2000)]):
    root: constr(min_length=1, max_length=2000)


class MapRunLabel(RootModel[str]):
    root: str


class MapRunStartedEventDetails(BaseModel):
    mapRunArn: Optional[LongArn] = None


class MapRunStatus(Enum):
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'


class MaxConcurrency(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class MissingRequiredParameter(RootModel[Any]):
    root: Any


class Name(RootModel[constr(min_length=1, max_length=80)]):
    root: constr(min_length=1, max_length=80)


class PageSize(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class PageToken(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ResourceNotFound(RootModel[Any]):
    root: Any


class ReverseOrder(RootModel[bool]):
    root: bool


class SendTaskFailureOutput(BaseModel):
    pass


class SendTaskHeartbeatOutput(BaseModel):
    pass


class SendTaskSuccessOutput(BaseModel):
    pass


class SensitiveCause(RootModel[SecretStr]):
    root: SecretStr


class SensitiveData(RootModel[SecretStr]):
    root: SecretStr


class SensitiveDataJobInput(RootModel[SecretStr]):
    root: SecretStr


class SensitiveError(RootModel[SecretStr]):
    root: SecretStr


class StateMachineAlreadyExists(RootModel[Any]):
    root: Any


class StateMachineDeleting(RootModel[Any]):
    root: Any


class StateMachineDoesNotExist(RootModel[Any]):
    root: Any


class StateMachineLimitExceeded(RootModel[Any]):
    root: Any


class StateMachineStatus(Enum):
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'


class StateMachineType(Enum):
    STANDARD = 'STANDARD'
    EXPRESS = 'EXPRESS'


class StateMachineTypeNotSupported(RootModel[Any]):
    root: Any


class StopExecutionInput(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    executionArn: Arn


class SyncExecutionStatus(Enum):
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceOutput(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TaskCredentials(BaseModel):
    roleArn: Optional[LongArn] = None


class TaskDoesNotExist(RootModel[Any]):
    root: Any


class TaskFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    resource: Name
    resourceType: Name


class TaskStartFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    resource: Name
    resourceType: Name


class TaskStartedEventDetails(BaseModel):
    resource: Name
    resourceType: Name


class TaskSubmitFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    resource: Name
    resourceType: Name


class TaskTimedOut(RootModel[Any]):
    root: Any


class TaskTimedOutEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    resource: Name
    resourceType: Name


class TaskToken(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class TimeoutInSeconds(RootModel[int]):
    root: int


class Timestamp(RootModel[datetime]):
    root: datetime


class ToleratedFailureCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class ToleratedFailurePercentage(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class TooManyTags(RootModel[Any]):
    root: Any


class TraceHeader(
    RootModel[constr(pattern=r'\p{ASCII}*', min_length=0, max_length=256)]
):
    root: constr(pattern=r'\p{ASCII}*', min_length=0, max_length=256)


class TracingConfiguration(BaseModel):
    enabled: Optional[Enabled] = None


class UnsignedInteger(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class UnsignedLong(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class UntagResourceInput(BaseModel):
    resourceArn: Arn
    tagKeys: TagKeyList


class UntagResourceOutput(BaseModel):
    pass


class UpdateMapRunInput(BaseModel):
    mapRunArn: LongArn
    maxConcurrency: Optional[MaxConcurrency] = None
    toleratedFailureCount: Optional[ToleratedFailureCount] = None
    toleratedFailurePercentage: Optional[ToleratedFailurePercentage] = None


class UpdateMapRunOutput(BaseModel):
    pass


class UpdateStateMachineInput(BaseModel):
    definition: Optional[Definition] = None
    loggingConfiguration: Optional[LoggingConfiguration] = None
    roleArn: Optional[Arn] = None
    stateMachineArn: Arn
    tracingConfiguration: Optional[TracingConfiguration] = None


class UpdateStateMachineOutput(BaseModel):
    updateDate: Timestamp


class ValidationException(RootModel[Any]):
    root: Any


class IncludedDetails(RootModel[bool]):
    root: bool


class Truncated(RootModel[bool]):
    root: bool


class XAmzTarget(Enum):
    AWSStepFunctions_CreateActivity = 'AWSStepFunctions.CreateActivity'


class XAmzTarget1(Enum):
    AWSStepFunctions_CreateStateMachine = 'AWSStepFunctions.CreateStateMachine'


class XAmzTarget2(Enum):
    AWSStepFunctions_DeleteActivity = 'AWSStepFunctions.DeleteActivity'


class XAmzTarget3(Enum):
    AWSStepFunctions_DeleteStateMachine = 'AWSStepFunctions.DeleteStateMachine'


class XAmzTarget4(Enum):
    AWSStepFunctions_DescribeActivity = 'AWSStepFunctions.DescribeActivity'


class XAmzTarget5(Enum):
    AWSStepFunctions_DescribeExecution = 'AWSStepFunctions.DescribeExecution'


class XAmzTarget6(Enum):
    AWSStepFunctions_DescribeMapRun = 'AWSStepFunctions.DescribeMapRun'


class XAmzTarget7(Enum):
    AWSStepFunctions_DescribeStateMachine = 'AWSStepFunctions.DescribeStateMachine'


class XAmzTarget8(Enum):
    AWSStepFunctions_DescribeStateMachineForExecution = (
        'AWSStepFunctions.DescribeStateMachineForExecution'
    )


class XAmzTarget9(Enum):
    AWSStepFunctions_GetActivityTask = 'AWSStepFunctions.GetActivityTask'


class XAmzTarget10(Enum):
    AWSStepFunctions_GetExecutionHistory = 'AWSStepFunctions.GetExecutionHistory'


class XAmzTarget11(Enum):
    AWSStepFunctions_ListActivities = 'AWSStepFunctions.ListActivities'


class XAmzTarget12(Enum):
    AWSStepFunctions_ListExecutions = 'AWSStepFunctions.ListExecutions'


class XAmzTarget13(Enum):
    AWSStepFunctions_ListMapRuns = 'AWSStepFunctions.ListMapRuns'


class XAmzTarget14(Enum):
    AWSStepFunctions_ListStateMachines = 'AWSStepFunctions.ListStateMachines'


class XAmzTarget15(Enum):
    AWSStepFunctions_ListTagsForResource = 'AWSStepFunctions.ListTagsForResource'


class XAmzTarget16(Enum):
    AWSStepFunctions_SendTaskFailure = 'AWSStepFunctions.SendTaskFailure'


class XAmzTarget17(Enum):
    AWSStepFunctions_SendTaskHeartbeat = 'AWSStepFunctions.SendTaskHeartbeat'


class XAmzTarget18(Enum):
    AWSStepFunctions_SendTaskSuccess = 'AWSStepFunctions.SendTaskSuccess'


class XAmzTarget19(Enum):
    AWSStepFunctions_StartExecution = 'AWSStepFunctions.StartExecution'


class XAmzTarget20(Enum):
    AWSStepFunctions_StartSyncExecution = 'AWSStepFunctions.StartSyncExecution'


class XAmzTarget21(Enum):
    AWSStepFunctions_StopExecution = 'AWSStepFunctions.StopExecution'


class XAmzTarget22(Enum):
    AWSStepFunctions_TagResource = 'AWSStepFunctions.TagResource'


class XAmzTarget23(Enum):
    AWSStepFunctions_UntagResource = 'AWSStepFunctions.UntagResource'


class XAmzTarget24(Enum):
    AWSStepFunctions_UpdateMapRun = 'AWSStepFunctions.UpdateMapRun'


class XAmzTarget25(Enum):
    AWSStepFunctions_UpdateStateMachine = 'AWSStepFunctions.UpdateStateMachine'


class ActivityFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class ActivityListItem(BaseModel):
    activityArn: Arn
    creationDate: Timestamp
    name: Name


class ActivityScheduleFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class ActivityStartedEventDetails(BaseModel):
    workerName: Optional[Identity] = None


class ActivityTimedOutEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class CloudWatchEventsExecutionDataDetails(BaseModel):
    included: Optional[IncludedDetails] = None


class CreateActivityOutput(BaseModel):
    activityArn: Arn
    creationDate: Timestamp


class CreateStateMachineOutput(BaseModel):
    creationDate: Timestamp
    stateMachineArn: Arn


class DescribeActivityOutput(BaseModel):
    activityArn: Arn
    creationDate: Timestamp
    name: Name


class DescribeExecutionOutput(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    executionArn: Arn
    input: Optional[SensitiveData] = None
    inputDetails: Optional[CloudWatchEventsExecutionDataDetails] = None
    mapRunArn: Optional[LongArn] = None
    name: Optional[Name] = None
    output: Optional[SensitiveData] = None
    outputDetails: Optional[CloudWatchEventsExecutionDataDetails] = None
    startDate: Timestamp
    stateMachineArn: Arn
    status: ExecutionStatus
    stopDate: Optional[Timestamp] = None
    traceHeader: Optional[TraceHeader] = None


class DescribeMapRunInput(BaseModel):
    mapRunArn: LongArn


class DescribeStateMachineForExecutionOutput(BaseModel):
    definition: Definition
    label: Optional[MapRunLabel] = None
    loggingConfiguration: Optional[LoggingConfiguration] = None
    mapRunArn: Optional[LongArn] = None
    name: Name
    roleArn: Arn
    stateMachineArn: Arn
    tracingConfiguration: Optional[TracingConfiguration] = None
    updateDate: Timestamp


class DescribeStateMachineOutput(BaseModel):
    creationDate: Timestamp
    definition: Definition
    label: Optional[MapRunLabel] = None
    loggingConfiguration: Optional[LoggingConfiguration] = None
    name: Name
    roleArn: Arn
    stateMachineArn: Arn
    status: Optional[StateMachineStatus] = None
    tracingConfiguration: Optional[TracingConfiguration] = None
    type: StateMachineType


class ExecutionAbortedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class ExecutionFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class ExecutionListItem(BaseModel):
    executionArn: Arn
    itemCount: Optional[UnsignedInteger] = None
    mapRunArn: Optional[LongArn] = None
    name: Name
    startDate: Timestamp
    stateMachineArn: Arn
    status: ExecutionStatus
    stopDate: Optional[Timestamp] = None


class ExecutionTimedOutEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class GetActivityTaskInput(BaseModel):
    activityArn: Arn
    workerName: Optional[Name] = None


class GetActivityTaskOutput(BaseModel):
    input: Optional[SensitiveDataJobInput] = None
    taskToken: Optional[TaskToken] = None


class GetExecutionHistoryInput(BaseModel):
    executionArn: Arn
    includeExecutionData: Optional[IncludeExecutionDataGetExecutionHistory] = None
    maxResults: Optional[PageSize] = None
    nextToken: Optional[PageToken] = None
    reverseOrder: Optional[ReverseOrder] = None


class HistoryEventExecutionDataDetails(BaseModel):
    truncated: Optional[Truncated] = None


class LambdaFunctionFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class LambdaFunctionScheduleFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class LambdaFunctionScheduledEventDetails(BaseModel):
    input: Optional[SensitiveData] = None
    inputDetails: Optional[HistoryEventExecutionDataDetails] = None
    resource: Arn
    taskCredentials: Optional[TaskCredentials] = None
    timeoutInSeconds: Optional[TimeoutInSeconds] = None


class LambdaFunctionStartFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class LambdaFunctionSucceededEventDetails(BaseModel):
    output: Optional[SensitiveData] = None
    outputDetails: Optional[HistoryEventExecutionDataDetails] = None


class LambdaFunctionTimedOutEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class ListActivitiesInput(BaseModel):
    maxResults: Optional[PageSize] = None
    nextToken: Optional[PageToken] = None


class ListExecutionsInput(BaseModel):
    mapRunArn: Optional[LongArn] = None
    maxResults: Optional[PageSize] = None
    nextToken: Optional[ListExecutionsPageToken] = None
    stateMachineArn: Optional[Arn] = None
    statusFilter: Optional[ExecutionStatus] = None


class ListMapRunsInput(BaseModel):
    executionArn: Arn
    maxResults: Optional[PageSize] = None
    nextToken: Optional[PageToken] = None


class ListStateMachinesInput(BaseModel):
    maxResults: Optional[PageSize] = None
    nextToken: Optional[PageToken] = None


class MapIterationEventDetails(BaseModel):
    index: Optional[UnsignedInteger] = None
    name: Optional[Name] = None


class MapRunExecutionCounts(BaseModel):
    aborted: UnsignedLong
    failed: UnsignedLong
    pending: UnsignedLong
    resultsWritten: UnsignedLong
    running: UnsignedLong
    succeeded: UnsignedLong
    timedOut: UnsignedLong
    total: UnsignedLong


class MapRunFailedEventDetails(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None


class MapRunItemCounts(BaseModel):
    aborted: UnsignedLong
    failed: UnsignedLong
    pending: UnsignedLong
    resultsWritten: UnsignedLong
    running: UnsignedLong
    succeeded: UnsignedLong
    timedOut: UnsignedLong
    total: UnsignedLong


class MapRunListItem(BaseModel):
    executionArn: Arn
    mapRunArn: LongArn
    startDate: Timestamp
    stateMachineArn: Arn
    stopDate: Optional[Timestamp] = None


class MapStateStartedEventDetails(BaseModel):
    length: Optional[UnsignedInteger] = None


class SendTaskFailureInput(BaseModel):
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    taskToken: TaskToken


class SendTaskHeartbeatInput(BaseModel):
    taskToken: TaskToken


class SendTaskSuccessInput(BaseModel):
    output: SensitiveData
    taskToken: TaskToken


class StartExecutionInput(BaseModel):
    input: Optional[SensitiveData] = None
    name: Optional[Name] = None
    stateMachineArn: Arn
    traceHeader: Optional[TraceHeader] = None


class StartExecutionOutput(BaseModel):
    executionArn: Arn
    startDate: Timestamp


class StartSyncExecutionInput(BaseModel):
    input: Optional[SensitiveData] = None
    name: Optional[Name] = None
    stateMachineArn: Arn
    traceHeader: Optional[TraceHeader] = None


class StartSyncExecutionOutput(BaseModel):
    billingDetails: Optional[BillingDetails] = None
    cause: Optional[SensitiveCause] = None
    error: Optional[SensitiveError] = None
    executionArn: Arn
    input: Optional[SensitiveData] = None
    inputDetails: Optional[CloudWatchEventsExecutionDataDetails] = None
    name: Optional[Name] = None
    output: Optional[SensitiveData] = None
    outputDetails: Optional[CloudWatchEventsExecutionDataDetails] = None
    startDate: Timestamp
    stateMachineArn: Optional[Arn] = None
    status: SyncExecutionStatus
    stopDate: Timestamp
    traceHeader: Optional[TraceHeader] = None


class StateEnteredEventDetails(BaseModel):
    input: Optional[SensitiveData] = None
    inputDetails: Optional[HistoryEventExecutionDataDetails] = None
    name: Name


class StateExitedEventDetails(BaseModel):
    name: Name
    output: Optional[SensitiveData] = None
    outputDetails: Optional[HistoryEventExecutionDataDetails] = None


class StateMachineListItem(BaseModel):
    creationDate: Timestamp
    name: Name
    stateMachineArn: Arn
    type: StateMachineType


class StopExecutionOutput(BaseModel):
    stopDate: Timestamp


class Tag(BaseModel):
    key: Optional[TagKey] = None
    value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceInput(BaseModel):
    resourceArn: Arn
    tags: TagList


class TaskScheduledEventDetails(BaseModel):
    heartbeatInSeconds: Optional[TimeoutInSeconds] = None
    parameters: ConnectorParameters
    region: Name
    resource: Name
    resourceType: Name
    taskCredentials: Optional[TaskCredentials] = None
    timeoutInSeconds: Optional[TimeoutInSeconds] = None


class TaskSubmittedEventDetails(BaseModel):
    output: Optional[SensitiveData] = None
    outputDetails: Optional[HistoryEventExecutionDataDetails] = None
    resource: Name
    resourceType: Name


class TaskSucceededEventDetails(BaseModel):
    output: Optional[SensitiveData] = None
    outputDetails: Optional[HistoryEventExecutionDataDetails] = None
    resource: Name
    resourceType: Name


class ActivityList(RootModel[List[ActivityListItem]]):
    root: List[ActivityListItem]


class ActivityScheduledEventDetails(BaseModel):
    heartbeatInSeconds: Optional[TimeoutInSeconds] = None
    input: Optional[SensitiveData] = None
    inputDetails: Optional[HistoryEventExecutionDataDetails] = None
    resource: Arn
    timeoutInSeconds: Optional[TimeoutInSeconds] = None


class ActivitySucceededEventDetails(BaseModel):
    output: Optional[SensitiveData] = None
    outputDetails: Optional[HistoryEventExecutionDataDetails] = None


class CreateActivityInput(BaseModel):
    name: Name
    tags: Optional[TagList] = None


class CreateStateMachineInput(BaseModel):
    definition: Definition
    loggingConfiguration: Optional[LoggingConfiguration] = None
    name: Name
    roleArn: Arn
    tags: Optional[TagList] = None
    tracingConfiguration: Optional[TracingConfiguration] = None
    type: Optional[StateMachineType] = None


class DescribeMapRunOutput(BaseModel):
    executionArn: Arn
    executionCounts: MapRunExecutionCounts
    itemCounts: MapRunItemCounts
    mapRunArn: LongArn
    maxConcurrency: MaxConcurrency
    startDate: Timestamp
    status: MapRunStatus
    stopDate: Optional[Timestamp] = None
    toleratedFailureCount: ToleratedFailureCount
    toleratedFailurePercentage: ToleratedFailurePercentage


class ExecutionList(RootModel[List[ExecutionListItem]]):
    root: List[ExecutionListItem]


class ExecutionStartedEventDetails(BaseModel):
    input: Optional[SensitiveData] = None
    inputDetails: Optional[HistoryEventExecutionDataDetails] = None
    roleArn: Optional[Arn] = None


class ExecutionSucceededEventDetails(BaseModel):
    output: Optional[SensitiveData] = None
    outputDetails: Optional[HistoryEventExecutionDataDetails] = None


class HistoryEvent(BaseModel):
    activityFailedEventDetails: Optional[ActivityFailedEventDetails] = None
    activityScheduleFailedEventDetails: Optional[ActivityScheduleFailedEventDetails] = (
        None
    )
    activityScheduledEventDetails: Optional[ActivityScheduledEventDetails] = None
    activityStartedEventDetails: Optional[ActivityStartedEventDetails] = None
    activitySucceededEventDetails: Optional[ActivitySucceededEventDetails] = None
    activityTimedOutEventDetails: Optional[ActivityTimedOutEventDetails] = None
    executionAbortedEventDetails: Optional[ExecutionAbortedEventDetails] = None
    executionFailedEventDetails: Optional[ExecutionFailedEventDetails] = None
    executionStartedEventDetails: Optional[ExecutionStartedEventDetails] = None
    executionSucceededEventDetails: Optional[ExecutionSucceededEventDetails] = None
    executionTimedOutEventDetails: Optional[ExecutionTimedOutEventDetails] = None
    id: EventId
    lambdaFunctionFailedEventDetails: Optional[LambdaFunctionFailedEventDetails] = None
    lambdaFunctionScheduleFailedEventDetails: Optional[
        LambdaFunctionScheduleFailedEventDetails
    ] = None
    lambdaFunctionScheduledEventDetails: Optional[
        LambdaFunctionScheduledEventDetails
    ] = None
    lambdaFunctionStartFailedEventDetails: Optional[
        LambdaFunctionStartFailedEventDetails
    ] = None
    lambdaFunctionSucceededEventDetails: Optional[
        LambdaFunctionSucceededEventDetails
    ] = None
    lambdaFunctionTimedOutEventDetails: Optional[LambdaFunctionTimedOutEventDetails] = (
        None
    )
    mapIterationAbortedEventDetails: Optional[MapIterationEventDetails] = None
    mapIterationFailedEventDetails: Optional[MapIterationEventDetails] = None
    mapIterationStartedEventDetails: Optional[MapIterationEventDetails] = None
    mapIterationSucceededEventDetails: Optional[MapIterationEventDetails] = None
    mapRunFailedEventDetails: Optional[MapRunFailedEventDetails] = None
    mapRunStartedEventDetails: Optional[MapRunStartedEventDetails] = None
    mapStateStartedEventDetails: Optional[MapStateStartedEventDetails] = None
    previousEventId: Optional[EventId] = None
    stateEnteredEventDetails: Optional[StateEnteredEventDetails] = None
    stateExitedEventDetails: Optional[StateExitedEventDetails] = None
    taskFailedEventDetails: Optional[TaskFailedEventDetails] = None
    taskScheduledEventDetails: Optional[TaskScheduledEventDetails] = None
    taskStartFailedEventDetails: Optional[TaskStartFailedEventDetails] = None
    taskStartedEventDetails: Optional[TaskStartedEventDetails] = None
    taskSubmitFailedEventDetails: Optional[TaskSubmitFailedEventDetails] = None
    taskSubmittedEventDetails: Optional[TaskSubmittedEventDetails] = None
    taskSucceededEventDetails: Optional[TaskSucceededEventDetails] = None
    taskTimedOutEventDetails: Optional[TaskTimedOutEventDetails] = None
    timestamp: Timestamp
    type: HistoryEventType


class HistoryEventList(RootModel[List[HistoryEvent]]):
    root: List[HistoryEvent] = Field(
        ...,
        description='Contains details about the events that occurred during an execution.',
    )


class ListActivitiesOutput(BaseModel):
    activities: ActivityList
    nextToken: Optional[PageToken] = None


class ListExecutionsOutput(BaseModel):
    executions: ExecutionList
    nextToken: Optional[ListExecutionsPageToken] = None


class ListTagsForResourceOutput(BaseModel):
    tags: Optional[TagList] = None


class MapRunList(RootModel[List[MapRunListItem]]):
    root: List[MapRunListItem]


class StateMachineList(RootModel[List[StateMachineListItem]]):
    root: List[StateMachineListItem]


class GetExecutionHistoryOutput(BaseModel):
    events: HistoryEventList
    nextToken: Optional[PageToken] = None


class ListMapRunsOutput(BaseModel):
    mapRuns: MapRunList
    nextToken: Optional[PageToken] = None


class ListStateMachinesOutput(BaseModel):
    nextToken: Optional[PageToken] = None
    stateMachines: StateMachineList
